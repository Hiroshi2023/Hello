name: Diamond Model CI/CD

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install huggingface_hub

      - name: 🧹 Data Processing
        run: python script/data_processing.py

      - name: 🏋️ Train Model
        run: python script/model_training.py

      - name: 📊 Evaluate Model
        run: python script/model_evaluation.py

      - name: 📈 Compare with Threshold
        id: compare_score
        run: |
          import json
          threshold = float("${{ secrets.THRESHOLD_SCORE }}")
          with open("results.json") as f:
              score = json.load(f)["score"]
          print(f"Model score: {score}, Threshold: {threshold}")
          if score >= threshold:
              print("::set-output name=deploy::true")
          else:
              print("::set-output name=deploy::false")

      - name: 🚀 Deploy to Hugging Face if score OK
        if: steps.compare_score.outputs.deploy == 'true'
        run: |
          from huggingface_hub import HfApi, HfFolder
          HfFolder.save_token("${{ secrets.HF_API_KEY }}")
          api = HfApi()
          api.upload_file(
              path_or_fileobj="models/model.pkl",
              path_in_repo="model.pkl",
              repo_id="votre-username/diamond-model",
              repo_type="model"
          )

      - name: 📧 Send Email Notification
        run: |
          python -c "
import smtplib
from email.message import EmailMessage
with open('results.json') as f:
    score = f.read()
msg = EmailMessage()
msg.set_content(f'Resultat évaluation : {score}')
msg['Subject'] = 'Évaluation du modèle Diamond'
msg['From'] = '${{ secrets.SMTP_USER }}'
msg['To'] = '${{ secrets.SMTP_USER }}'
server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
server.login('${{ secrets.SMTP_USER }}', '${{ secrets.SMTP_PASS }}')
server.send_message(msg)
server.quit()
"
